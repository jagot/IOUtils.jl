var documenterSearchIndex = {"docs":
[{"location":"#IOUtils.jl-1","page":"Home","title":"IOUtils.jl","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Modules = [IOUtils]","category":"page"},{"location":"#IOUtils.horizontal_line","page":"Home","title":"IOUtils.horizontal_line","text":"horizontal_line([io=stdout; char=\"━\", color=:light_black])\n\nDraw a colored horizontal line of chars across the whole screen.\n\nExample\n\njulia> horizontal_line()\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n\njulia> horizontal_line(char=\"─\")\n────────────────────────────────────────────────────────────────────────────────\n\n\n\n\n\n\n","category":"function"},{"location":"#IOUtils.indent-Tuple{Function,IO,Int64}","page":"Home","title":"IOUtils.indent","text":"indent(fun, io, n[; indent_first=true, kwargs...])\n\nPrint all the output of fun to io indented by n spaces. If !indent_first, the first line is not indented. kwargs... are passed on to printstyled.\n\nExamples\n\njulia> indent(stdout, 6) do io\n           println(io, \"Hello\")\n           println(io, \"World\")\n       end\n      Hello\n      World\n\n\n\n\n\n","category":"method"},{"location":"#IOUtils.indent-Tuple{Function,IO,String}","page":"Home","title":"IOUtils.indent","text":"indent(fun, io, first_line::String[; kwargs...])\n\nVariant of indent that will first print first_line and then print all the output from fun indented by the length of first_line. kwargs are passed on to printstyled.\n\nExamples\n\njulia> indent(stdout, \"Important information: \") do io\n           println(io, \"Hello\")\n           println(io, \"World\")\n       end\nImportant information: Hello\n                       World\n\n\njulia> indent(stdout, \"Important information: \") do io\n           print_boxed(io) do io\n               println(io, \"Hello\")\n               println(io, \"World\")\n           end\n       end\n\nImportant information: ┌  Hello\n                       └  World\n\n\n\n\n\n","category":"method"},{"location":"#IOUtils.print_boxed","page":"Home","title":"IOUtils.print_boxed","text":"print_boxed(io, msglines[, prefix=\"\", suffix=\"\"; color=:light_black, chars=\"[┌│└\"])\n\nPrint each line in msglines to io with an enclosing box drawn to the left, using the specified color. The first and last line will additionally print the optional parameter prefix and suffix, respectively. The box drawing characters can be customized by setting the string chars to any combination of four characters.\n\nExamples\n\njulia> print_boxed(stdout, [\"Hello\", \"World\"], \">>>\", \"<<<\")\n┌ >>>  Hello\n└  World <<<\n\njulia> print_boxed(stdout, [\"Hello world\"], chars=\"(╭│╰\")\n(  Hello world\n\njulia> print_boxed(stdout, [\"Hello\", \"world\"], chars=\"(╭│╰\")\n╭  Hello\n╰  world\n\n\n\n\n\n","category":"function"},{"location":"#IOUtils.print_boxed-Tuple{Function,IO,Vararg{Any,N} where N}","page":"Home","title":"IOUtils.print_boxed","text":"print_boxed(fun::Function, io, args...; kwargs...)\n\nBlock-version of print_boxed that via redirect_output captures the output of fun, and prints them in a block.\n\nExamples\n\njulia> print_boxed(stdout) do io\n           println(io, \"Hello\")\n           println(io, \"World\")\n       end\n┌  Hello\n└  World\n\n\n\n\n\n","category":"method"},{"location":"#IOUtils.redirect_output-Tuple{Function}","page":"Home","title":"IOUtils.redirect_output","text":"redirect_output(fun)\n\nCreate an IOBuffer, pass it to fun, and return the captured output as a string.\n\nExamples\n\njulia> redirect_output() do io\n           println(io, \"Hello\")\n           println(io, \"World\")\n       end\n\"Hello\\nWorld\\n\"\n\n\n\n\n\n","category":"method"},{"location":"#IOUtils.@display","page":"Home","title":"IOUtils.@display","text":"@display expr\n\nDisplay expr using print_boxed along with the location from where the macro was called (useful for debugging); a mixture of @show, display, and @debug.\n\nExamples\n\njulia> @display sin.(1:10)\n┌ sin.(1:10) =  10-element Array{Float64,1}:\n│    0.8414709848078965\n│    0.9092974268256817\n│    0.1411200080598672\n│   -0.7568024953079282\n│   -0.9589242746631385\n│   -0.27941549819892586\n│    0.6569865987187891\n│    0.9893582466233818\n│    0.4121184852417566\n│   -0.5440211108893698\n└  @ REPL[16]:1\n\n\n\n\n\n","category":"macro"}]
}
